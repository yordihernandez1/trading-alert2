import os
import yfinance as yf
import ta
import requests
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
from bs4 import BeautifulSoup
from nltk.sentiment.vader import SentimentIntensityAnalyzer
import json
from pathlib import Path

BOT_TOKEN = os.environ.get("BOT_TOKEN")
CHAT_ID = os.environ.get("CHAT_ID")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN no est√° definido. Aseg√∫rate de configurarlo como variable de entorno.")
if not CHAT_ID:
    raise ValueError("‚ùå CHAT_ID no est√° definido. Aseg√∫rate de configurarlo como variable de entorno.")

SYMBOLS = [
    # ACCIONES VOL√ÅTILES
    "TSLA",     # Tesla
    "NVDA",     # Nvidia
    "AMD",      # AMD ‚Äì correlaci√≥n con NVDA
    "META",     # Meta
    "AMZN",     # Amazon

    # ETFs ESTRAT√âGICOS
    "SPY",      # S&P 500
    "QQQ",      # Nasdaq 100
    "TQQQ",     # Nasdaq apalancado
    "SQQQ",     # Nasdaq inverso

    # CRIPTO (sin BTC)
    "ETH-USD",  # Ethereum
    "SOL-USD",  # Solana

    # √çNDICES
    "^GSPC",    # S&P 500
    "^IXIC",    # Nasdaq Composite

    # MATERIAS PRIMAS
    "GC=F"      # Oro
]

RSI_SOBRECOMPRA = 70
RSI_SOBREVENTA = 30
UMBRAL_ALERTA = 50
LOG_ALERTA = "ultima_alerta.json"
TIEMPO_RESUMEN_MINUTOS = 30

def registrar_alerta():
    try:
        print("üìù Registrando alerta en ultima_alerta.json...")
        with open(LOG_ALERTA, "w") as f:
            json.dump({"ultima": datetime.utcnow().isoformat()}, f)
    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo registrar la alerta: {e}")

def tiempo_desde_ultima_alerta():
    path = Path(LOG_ALERTA)
    if not path.exists():
        return 9999
    try:
        with open(path, "r") as f:
            data = json.load(f)
        ultima_raw = data.get("ultima")
        if not ultima_raw:
            raise ValueError("Campo 'ultima' no encontrado")
        ultima = datetime.fromisoformat(ultima_raw)
        delta = (datetime.utcnow() - ultima).total_seconds() / 60
        print(f"‚è± √öltima alerta enviada hace {int(delta)} minutos.")
        return delta
    except Exception as e:
        print(f"‚ö†Ô∏è Error leyendo archivo de alerta: {e}")
        return 9999

LOG_RESUMEN = "ultimo_resumen.json"

def registrar_resumen():
    try:
        with open(LOG_RESUMEN, "w") as f:
            json.dump({"ultimo": datetime.utcnow().isoformat()}, f)
    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo registrar el resumen: {e}")

def tiempo_desde_ultimo_resumen():
    path = Path(LOG_RESUMEN)
    if not path.exists():
        return 9999
    try:
        with open(path, "r") as f:
            data = json.load(f)
        ultimo_raw = data.get("ultimo")
        if not ultimo_raw:
            raise ValueError("Campo 'ultimo' no encontrado")
        ultimo = datetime.fromisoformat(ultimo_raw)
        delta = (datetime.utcnow() - ultimo).total_seconds() / 60
        print(f"üìä √öltimo resumen enviado hace {int(delta)} minutos.")
        return delta
    except Exception as e:
        print(f"‚ö†Ô∏è Error leyendo archivo de resumen: {e}")
        return 9999

def encontrar_soporte_resistencia(close, periodo=14):
    soporte = min(close[-periodo:])
    resistencia = max(close[-periodo:])
    return round(soporte, 2), round(resistencia, 2)

from datetime import datetime, time

def es_mercado_abierto():
    ahora = datetime.utcnow()
    # D√≠as de semana: 0 = lunes, ..., 4 = viernes
    if ahora.weekday() >= 5:
        return False

    hora_actual = ahora.time()
    apertura = time(14, 30)  # 14:30 UTC
    cierre = time(21, 0)     # 21:00 UTC

    return apertura <= hora_actual <= cierre

def get_news_headlines(ticker, num_headlines=3):
    url = f"https://www.google.com/search?q={ticker}+stock&tbm=nws"
    headers = { 
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
        "Accept-Language": "en-US,en;q=0.9"
    }

    try:
        res = requests.get(url, headers=headers, timeout=7)
        if res.status_code != 200:
            print(f"‚ö†Ô∏è Error al buscar noticias de {ticker} - status {res.status_code}")
            return []

        soup = BeautifulSoup(res.text, 'html.parser')
        containers = soup.select('div.dbsr')
        if not containers:
            print(f"‚ö†Ô∏è No se encontraron titulares para {ticker}.")
            return []

        headlines = []
        for el in containers[:num_headlines]:
            title_div = el.select_one('div.JheGif.nDgy9d')
            if title_div:
                headlines.append(title_div.text.strip())

        return headlines

    except Exception as e:
        print(f"‚ö†Ô∏è Error al obtener noticias para {ticker}: {e}")
        return []

def get_news_headlines_bing(ticker, num_headlines=3):
    url = f"https://www.bing.com/news/search?q={ticker}+stock"
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        res = requests.get(url, headers=headers, timeout=7)
        soup = BeautifulSoup(res.text, 'html.parser')
        items = soup.select("a.title")[:num_headlines]
        headlines = [item.text.strip() for item in items if item.text.strip()]
        if not headlines:
            print(f"‚ö†Ô∏è No se encontraron titulares en Bing para {ticker}")
        return headlines
    except Exception as e:
        print(f"‚ö†Ô∏è Error en Bing News ({ticker}): {e}")
        return []

def analizar_sentimiento_vader(titulares):
    if not titulares:
        return "Sin noticias recientes."
    sia = SentimentIntensityAnalyzer(lexicon_file="vader_lexicon.txt")
    text = " ".join(titulares)
    score = sia.polarity_scores(text)["compound"]
    sentimiento = "Positivo" if score >= 0.05 else "Negativo" if score <= -0.05 else "Neutro"
    resumen = "; ".join(titulares[:2])
    return f"{resumen}\nSentimiento general: {sentimiento}"

def analizar_tecnico_diario(ticker):
    try:
        df = yf.download(ticker, period="3mo", interval="1d", auto_adjust=True, progress=False)
        if df.empty or len(df) < 50:
            return None
        close = df["Close"].squeeze()
        high = df["High"].squeeze()
        low = df["Low"].squeeze()

        rsi = ta.momentum.RSIIndicator(close).rsi()
        macd = ta.trend.MACD(close)
        sma_50 = ta.trend.SMAIndicator(close, window=50).sma_indicator()
        sma_200 = ta.trend.SMAIndicator(close, window=200).sma_indicator()
        atr = ta.volatility.AverageTrueRange(high, low, close).average_true_range()
        tendencia = "Alcista" if close.iloc[-1] > close.iloc[-10] else "Bajista"
        soporte, resistencia = encontrar_soporte_resistencia(close)

        se√±ales = []
        if rsi.iloc[-1] > RSI_SOBRECOMPRA:
            se√±ales.append("RSI en sobrecompra")
        if rsi.iloc[-1] < RSI_SOBREVENTA:
            se√±ales.append("RSI en sobreventa")
        if macd.macd().iloc[-1] > macd.macd_signal().iloc[-1]:
            se√±ales.append("MACD cruzando al alza")
        else:
            se√±ales.append("MACD cruzando a la baja")
        if close.iloc[-1] > sma_50.iloc[-1]:
            se√±ales.append("Precio sobre SMA50")
        if sma_50.iloc[-1] > sma_200.iloc[-1]:
            se√±ales.append("SMA50 sobre SMA200")

        return {
            "precio": round(close.iloc[-1], 2),
            "rsi": round(rsi.iloc[-1], 2),
            "tendencia": tendencia,
            "volatilidad": round(np.std(close[-14:]) / close.iloc[-1] * 100, 2),
            "atr": round(atr.iloc[-1], 2),
            "soporte": soporte,
            "resistencia": resistencia,
            "se√±ales": se√±ales
        }
    except Exception as e:
        print(f"‚ùå Error en an√°lisis diario de {ticker}: {e}")
        return None

def analizar_intrad√≠a(ticker):
    try:
        df = yf.download(ticker, period="2d", interval="5m", auto_adjust=True, progress=False)

        if df.empty or len(df) < 30 or df["Volume"].iloc[-1].item() == 0:
            return None, None

        close = df["Close"].squeeze()
        low = df["Low"].squeeze()
        high = df["High"].squeeze()
        volume = df["Volume"].squeeze()

        se√±ales = []

        ema9 = ta.trend.EMAIndicator(close, window=9).ema_indicator()
        ema21 = ta.trend.EMAIndicator(close, window=21).ema_indicator()
        rsi = ta.momentum.RSIIndicator(close).rsi()

        cruce_ema = "ninguno"
        if ema9.iloc[-2] < ema21.iloc[-2] and ema9.iloc[-1] > ema21.iloc[-1]:
            cruce_ema = "Cruce alcista EMA9/21"
        elif ema9.iloc[-2] > ema21.iloc[-2] and ema9.iloc[-1] < ema21.iloc[-1]:
            cruce_ema = "Cruce bajista EMA9/21"

        rsi_val = rsi.iloc[-1]
        if rsi_val >= RSI_SOBRECOMPRA:
            zona_rsi = "Sobrecompra"
        elif rsi_val <= RSI_SOBREVENTA:
            zona_rsi = "Sobreventa"
        else:
            zona_rsi = "Neutral"

        se√±ales.append(f"RSI en zona {zona_rsi.lower()} ({round(rsi_val, 1)})")

        volumen_fuerte = volume.iloc[-1] > volume.rolling(20).mean().iloc[-1] * 1.5

        precio_actual = close.iloc[-1]
        minimo_reciente = low[-6:-1].min()
        maximo_esperado = high[-6:].max()

        riesgo = round(precio_actual - minimo_reciente, 2)
        recompensa = round(maximo_esperado - precio_actual, 2)

        if riesgo <= 0 or recompensa <= 0:
            rr = "No v√°lido"
            tiempo_estimado = "N/A"
        else:
            rr = round(recompensa / riesgo, 2)

            velas = close[-6:]
            cambios = velas.diff().dropna()

            if cruce_ema == "Cruce alcista EMA9/21":
                velocidad = cambios[cambios > 0].mean()
            else:
                velocidad = abs(cambios[cambios < 0].mean())

            if velocidad is not None and isinstance(velocidad, (float, int)) and velocidad > 0:
                tiempo_estimado = round((recompensa / velocidad) * 5)
            else:
                tiempo_estimado = "N/A"

        prob_sube = prob_baja = 0

        if cruce_ema == "Cruce alcista EMA9/21":
            se√±ales.append("üìà Cruce alcista EMA9/21")
            prob_sube += 30
        elif cruce_ema == "Cruce bajista EMA9/21":
            se√±ales.append("üìâ Cruce bajista EMA9/21")
            prob_baja += 30

        if zona_rsi == "Sobreventa":
            se√±ales.append("üîΩ RSI en sobreventa")
            prob_sube += 20
        elif zona_rsi == "Sobrecompra":
            se√±ales.append("üîº RSI en sobrecompra")
            prob_baja += 20

        if volumen_fuerte:
            se√±ales.append("üî• Volumen inusualmente alto")
            prob_sube += 10
            prob_baja += 10

        return {
            "se√±ales": se√±ales,
            "prob_sube": prob_sube,
            "prob_baja": prob_baja,
            "rr": rr,
            "tiempo_estimado": tiempo_estimado,
            "direccion": "subida" if prob_sube >= prob_baja else "bajada"
        }, df

    except Exception as e:
        print(f"‚ùå Error intrad√≠a {ticker}: {e}")
        return None, None

def enviar_telegram(mensaje):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": mensaje, "parse_mode": "Markdown"}
    try:
        requests.post(url, data=payload, timeout=10)
    except Exception as e:
        print("‚ö†Ô∏è Error enviando mensaje:", e)

def enviar_imagen(path):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"
    with open(path, "rb") as photo:
        requests.post(url, files={"photo": photo}, data={"chat_id": CHAT_ID})

def generar_grafico(df, ticker):
    plt.figure(figsize=(10, 4))

    close = df["Close"].squeeze()

    ema9 = ta.trend.EMAIndicator(close, window=9).ema_indicator()
    ema21 = ta.trend.EMAIndicator(close, window=21).ema_indicator()

    plt.plot(close, label="Precio", linewidth=1.2)
    plt.plot(ema9, label="EMA9")
    plt.plot(ema21, label="EMA21")

    plt.title(f"{ticker} - Intrad√≠a 5m")
    plt.legend()
    plt.grid()
    filename = f"{ticker}_chart.png"
    plt.savefig(filename, bbox_inches="tight")
    plt.close()
    return filename

# Ejecuci√≥n principal
candidatos = []

if es_mercado_abierto(): 

    for ticker in SYMBOLS:
        print(f"üîç Evaluando {ticker}...")
        diario = analizar_tecnico_diario(ticker)
        intradia, df = analizar_intrad√≠a(ticker)
        if diario and intradia:
            prob_total = max(intradia["prob_sube"], intradia["prob_baja"])
            candidatos.append({
                "ticker": ticker,
                "diario": diario,
                "intradia": intradia,
                "df": df,
                "prob_total": prob_total
            })
            print(f"‚úÖ An√°lisis completo para {ticker}")

    if candidatos:
        mejor = max(candidatos, key=lambda r: r["prob_total"])

        if mejor["prob_total"] >= UMBRAL_ALERTA:
            entrada = mejor["diario"]["precio"]

            if mejor["intradia"]["direccion"] == "subida":
                stop = mejor["diario"]["soporte"]
                take_profit = entrada + (entrada - stop) * 2
            else:
                stop = mejor["diario"]["resistencia"]
                take_profit = entrada - (stop - entrada) * 2

            entrada = round(entrada, 2)
            stop = round(stop, 2)
            take_profit = round(take_profit, 2)

            titulares = get_news_headlines(mejor["ticker"])
            if not titulares:
                print("üîÅ Usando Bing como respaldo para titulares.")
                titulares = get_news_headlines_bing(mejor["ticker"])

            resumen_noticia = analizar_sentimiento_vader(titulares)

            mensaje = f"""üö® *Mejor oportunidad: {mejor['ticker']}*
{'Largo' if mejor['intradia']['direccion'] == 'subida' else 'Corto'}

*Se√±ales diarias:*
{chr(10).join(f"- {s}" for s in mejor['diario']['se√±ales'])}

*Se√±ales intrad√≠a:*
{chr(10).join(f"- {s}" for s in mejor['intradia']['se√±ales'])}

üìà *Prob. subida:* {mejor['intradia']['prob_sube']}%  
üìâ *Prob. bajada:* {mejor['intradia']['prob_baja']}%  
üéØ *Riesgo/Recompensa estimado:* {mejor['intradia']['rr']}  
‚è≥ *Tiempo estimado para alcanzar ganancia:* {mejor['intradia']['tiempo_estimado']} min  
üìä *Soporte:* {mejor['diario']['soporte']} | üìà *Resistencia:* {mejor['diario']['resistencia']}  
üíµ *Entrada sugerida:* {entrada}  
üõë *Stop Loss:* {stop}  
üéØ *Take Profit:* {take_profit}  

üì∞ *Noticias recientes:*
{resumen_noticia}
"""

            enviar_telegram(mensaje)
            registrar_alerta()
            img_path = generar_grafico(mejor["df"], mejor["ticker"])
            enviar_imagen(img_path)

if es_mercado_abierto():
    minutos_alerta = tiempo_desde_ultima_alerta()
    minutos_resumen = tiempo_desde_ultimo_resumen()

    if minutos_alerta >= TIEMPO_RESUMEN_MINUTOS and minutos_resumen >= TIEMPO_RESUMEN_MINUTOS and candidatos:
        resumen = "‚è± *Sin alertas en los √∫ltimos 30 minutos.*\n\n*Probabilidades actuales:*\n\n"
        for c in candidatos:
            resumen += f"{c['ticker']}: üìà {c['intradia']['prob_sube']}% subida | üìâ {c['intradia']['prob_baja']}% bajada\n"
        enviar_telegram(resumen)
        registrar_resumen()
    else:
        print("üïí No se env√≠a resumen: mercado abierto pero dentro del margen o sin candidatos.")
else:
    print("üîï Mercado cerrado: no se env√≠a resumen.")
